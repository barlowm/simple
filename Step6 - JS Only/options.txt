[08:13:00] Using gulpfile D:\Users\Administrator\Projects\simple\Step5\gulpfile.js
[08:13:00] Starting 'pretty'...
------------------ Making JavaScript Pretty ------------------
Source Files: ./src/js/**/*.js,./src/css/*.css,./*.md,./doc/**/*.md
Dest Folder: ./pretty
Prettier Options -  undefined
[08:13:00] Finished 'pretty' after 13 ms
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\app.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ] } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\app.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\app.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\app.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\main.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ] } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\main.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\main.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\main.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\plugins.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ] } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\plugins.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\plugins.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\js\\plugins.js',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\css\\main.css',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ] } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\css\\main.css',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\css\\main.css',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: true,
  logger: false }
Prettier - Normalize Options -  { printWidth: 100,
  parser: 'flow',
  filepath: 'D:\\Users\\Administrator\\Projects\\simple\\Step5\\src\\css\\main.css',
  plugins: 
   [ { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], options: [Object], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] },
     { languages: [Array], printers: [Object] },
     { parsers: [Object] } ],
  astFormat: 'estree',
  locEnd: [Function: t],
  locStart: [Function: t],
  printer: 
   { print: [Function: genericPrint$1],
     embed: [Function: embed],
     insertPragma: [Function: insertPragma$1],
     massageAstNode: [Function: clean],
     hasPrettierIgnore: [Function: hasPrettierIgnore],
     willPrintOwnComments: [Function: willPrintOwnComments],
     canAttachComment: [Function: canAttachComment],
     printComment: [Function: printComment$1],
     isBlockComment: [Function: isBlockComment],
     handleComments: 
      { ownLine: [Function: handleOwnLineComment],
        endOfLine: [Function: handleEndOfLineComment],
        remaining: [Function: handleRemainingComment] } },
  arrowParens: 'avoid',
  bracketSpacing: true,
  cursorOffset: -1,
  insertPragma: false,
  jsxBracketSameLine: false,
  pluginSearchDirs: [],
  proseWrap: 'preserve',
  rangeEnd: Infinity,
  rangeStart: 0,
  requirePragma: false,
  semi: true,
  singleQuote: false,
  tabWidth: 2,
  trailingComma: 'none',
  useFlowParser: false,
  useTabs: false } [ { name: 'arrowParens',
    since: '1.9.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'avoid',
    description: 'Include parentheses around a sole arrow function parameter.',
    choices: [ [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'bracketSpacing',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: true,
    description: 'Print spaces between brackets.',
    oppositeDescription: 'Do not print spaces between brackets.',
    pluginDefaults: {} },
  { name: 'cursorOffset',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: -1,
    range: { start: -1, end: Infinity, step: 1 },
    description: 'Print (to stderr) where a cursor at the given position would move to after formatting.\n\t\t\tThis option cannot be used with --range-start and --range-end.',
    pluginDefaults: {} },
  { name: 'filepath',
    since: '1.4.0',
    category: 'Special',
    type: 'path',
    default: undefined,
    description: 'Specify the input filepath. This will be used to do parser inference.',
    pluginDefaults: {} },
  { name: 'insertPragma',
    since: '1.8.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Insert @format pragma into file\'s first docblock comment.',
    pluginDefaults: {} },
  { name: 'jsxBracketSameLine',
    since: '0.17.0',
    category: 'JavaScript',
    type: 'boolean',
    default: false,
    description: 'Put > on the last line instead of at a new line.',
    pluginDefaults: {} },
  { name: 'parser',
    since: '0.0.10',
    category: 'Global',
    type: 'choice',
    default: undefined,
    description: 'Which parser to use.',
    exception: [Function: exception],
    choices: 
     [ [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object],
       [Object] ],
    pluginDefaults: {} },
  { name: 'pluginSearchDirs',
    since: '1.13.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Custom directory that contains prettier plugins in node_modules subdirectory.\n\t\t\tOverrides default behavior when plugins are searched relatively to the location of Prettier.\n\t\t\tMultiple values are accepted.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'plugins',
    since: '1.10.0',
    type: 'path',
    array: true,
    default: [],
    category: 'Global',
    description: 'Add a plugin. Multiple plugins can be passed as separate `--plugin`s.',
    exception: [Function: exception],
    pluginDefaults: {} },
  { name: 'printWidth',
    since: '0.0.0',
    category: 'Global',
    type: 'int',
    default: 80,
    description: 'The line length where Prettier will try wrap.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'proseWrap',
    since: '1.8.2',
    category: 'Markdown',
    type: 'choice',
    default: 'preserve',
    description: 'How to wrap prose. (markdown)',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'rangeEnd',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: Infinity,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code ending at a given character offset (exclusive).\n\t\t\tThe range will extend forwards to the end of the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'rangeStart',
    since: '1.4.0',
    category: 'Special',
    type: 'int',
    default: 0,
    range: { start: 0, end: Infinity, step: 1 },
    description: 'Format code starting at a given character offset.\n\t\t\tThe range will extend backwards to the start of the first line containing the selected statement.\n\t\t\tThis option cannot be used with --cursor-offset.',
    pluginDefaults: {} },
  { name: 'requirePragma',
    since: '1.7.0',
    category: 'Special',
    type: 'boolean',
    default: false,
    description: 'Require either \'@prettier\' or \'@format\' to be present in the file\'s first docblock comment\n\t\t\tin order for it to be formatted.',
    pluginDefaults: {} },
  { name: 'semi',
    since: '1.0.0',
    category: 'JavaScript',
    type: 'boolean',
    default: true,
    description: 'Print semicolons.',
    oppositeDescription: 'Do not print semicolons, except at the beginning of lines which may need them.',
    pluginDefaults: {} },
  { name: 'singleQuote',
    since: '0.0.0',
    category: 'Common',
    type: 'boolean',
    default: false,
    description: 'Use single quotes instead of double quotes.',
    pluginDefaults: {} },
  { name: 'tabWidth',
    type: 'int',
    category: 'Global',
    default: 2,
    description: 'Number of spaces per indentation level.',
    range: { start: 0, end: Infinity, step: 1 },
    pluginDefaults: {} },
  { name: 'trailingComma',
    since: '0.0.0',
    category: 'JavaScript',
    type: 'choice',
    default: 'none',
    description: 'Print trailing commas wherever possible when multi-line.',
    choices: [ [Object], [Object], [Object], [Object], [Object] ],
    pluginDefaults: {} },
  { name: 'useFlowParser',
    since: '0.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    deprecated: '0.0.10',
    description: 'Use flow parser.',
    redirect: { option: 'parser', value: 'flow' },
    pluginDefaults: {} },
  { name: 'useTabs',
    since: '1.0.0',
    category: 'Global',
    type: 'boolean',
    default: false,
    description: 'Indent with tabs instead of spaces.',
    pluginDefaults: {} } ] { descriptor: [Function: apiDescriptor],
  passThrough: [ 'astFormat', 'printer', 'locStart', 'locEnd' ] }
